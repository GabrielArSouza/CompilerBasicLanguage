<program>               ::=     <blocks>

<blocks>                ::=     ENDL <blocks>
                              | INTEGER <numerated_main>

<numerated_main>        ::=     END ENDL EOF
                              | <numerated_block> <blocks>

<numerated_block>       ::=     ENDL
                              | <forblock>
                              | <stmt> ENDL

<forblock>              ::=     <forinit> <forstep> <forbody>

<forinit>               ::=     FOR <var> = <expr> TO <expr>

<forstep>               ::=     STEP <expr> ENDL
                              | ENDL

<forbody>               ::=     ENDL <forbody>
                              | INTEGER <numerated_for>

<numerated_for>         ::=     <fornext> ENDL
                              | <numerated_block> <forbody>

<fornext>               ::=     NEXT <var>

<stmt>                  ::=     LET <var> = <expr>
                              | PRINT <expr_list>
                              | READ  <variable_list>
                              | DATA  <num_list>
                              | GOTO INTEGER
                              | IF <expr> THEN INTEGER
                              | GOSUB INTEGER
                              | RETURN
                              | DEF FUNCTION ( VARIABLE ) = <expr>
                              | DIM <var>
                              | STOP

<num_list>              ::=    INTEGER <num_list2>
                              | FLOAT <num_list2>

<num_list2>             ::=    , <num_list>
                              | LAMBDA

<expr_list>             ::=     <expr> <expr_list2>

<expr_list2>            ::=     , <expr_list>
                              | ; <expr_list>
                              | LAMBDA

<variable_list>         ::=     <var> <variable_list2>

<variable_list2>        ::=     , <variable_list>
                              | LAMBDA

<expr>                  ::=     <or_exp>

<or_exp>                ::=     <and_exp> <or_exp2>

<or_exp2>               ::=     OR <or_exp>
                              | LAMBDA

<and_exp>               ::=    <rel_exp> <and_exp2>

<and_exp2>              ::=    AND <and_exp>
                              | LAMBDA

<rel_exp>               ::=     <sum_exp> <rel_exp2>

<rel_exp2>              ::=     <rel_op> <sum_exp>
                              | LAMBDA

<sum_exp>               ::=     <prod_exp> <sum_exp2>

<sum_exp2>              ::=     + <sum_exp>
                              | - <sum_exp>
                              | LAMBDA

<prod_exp>              ::=     <expo_exp> <prod_exp2>

<prod_exp2>             ::=     * <prod_exp>
                              | / <prod_exp>
                              | % <prod_exp>
                              | LAMBDA

<expo_exp>              ::=     <unary_exp> <expo_exp2>

<expo_exp2>             ::=     ^ <expo_exp>
                              | LAMBDA

<unary_exp>             ::=     INTEGER
                              | FLOAT
                              | <var>
                              | STRING
                              | CHAR
                              | BOOLEAN
                              | <unary_op> <unary_exp>
                              | ( <expr> )
                              | FUNCTION ( <expr> )
                              | <native_function> ( <expr> )

<rel_op>                ::=     <> | = | < | > | <= | >=

<var>                   ::=     VARIABLE <variable2>

<variable2>             ::=     ( <expr> <idx2> )
                              | LAMBDA

<idx2>                  ::=     , <expr>
                              | LAMBDA

<unary_op>              ::=     - | + | NOT

<native_function>       ::=     ABS | ATN | COS | EXP | INT
                              | LOG | RND | SIN | SQR | TAN
